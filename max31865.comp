component max31865 "MAX31865 RTD Temperature Sensor HAL component";

pin out float temperature "Temperature in Celsius";
pin out bit fault "Indicates a fault condition (e.g., open wire)";
pin out u32 raw_data "Raw RTD resistance data";

pin in bit reset "Reset the fault status register";

param rw float r_ref = 430.0 "Reference resistance (e.g., 430 Ohms for PT100)";
param rw float rtd_nominal = 100.0 "Nominal RTD resistance at 0°C (100 for PT100, 1000 for PT1000)";
param rw bit wire_mode = 1 "2=2-wire, 3=3-wire, 4=4-wire RTD configuration";

license "GPL";
option extra_setup;

variable int spi_fd;
variable unsigned int config_register = 0xC2; /* Default: 3-wire mode, fault detection enabled */

function _setup
{
    /* Open SPI device (SPI bus 0, chip select 0) */
    spi_fd = hal_spi_open("/dev/spidev0.0", 500000, 0); /* 500 kHz, SPI mode 0 */
    if (spi_fd < 0) {
        rtapi_print_msg(RTAPI_MSG_ERR, "max31865: Unable to open SPI device\n");
        return -1;
    }

    /* Configure MAX31865 */
    config_register = (wire_mode == 2 ? 0xC2 : (wire_mode == 3 ? 0xD2 : 0xE2));
    hal_spi_write(spi_fd, &config_register, 1);
    return 0;
}

function update
{
    unsigned char buffer[8] = {0};
    unsigned int rtd_data = 0;
    float rtd_resistance = 0.0;
    float temperature_c = 0.0;

    /* Read RTD data (2 bytes from register 0x01) */
    buffer[0] = 0x01; /* RTD MSB register */
    hal_spi_transfer(spi_fd, buffer, buffer, 3);

    rtd_data = ((buffer[1] << 8) | buffer[2]) >> 1; /* 15-bit RTD data */
    raw_data = rtd_data;

    /* Calculate resistance */
    rtd_resistance = (float)rtd_data * r_ref / 32768.0;

    /* Convert resistance to temperature using Callendar-Van Dusen equation */
    float a = 3.9083e-3;
    float b = -5.775e-7;
    float temp = (-a + sqrt(a * a - 4 * b * (1 - rtd_resistance / rtd_nominal))) / (2 * b);

    if (temp > 0) {
        temperature = temp;
    } else {
        /* Alternative formula for temperatures below 0°C */
        temperature = (rtd_resistance / rtd_nominal - 1.0) / (a + b * (rtd_resistance / rtd_nominal - 1.0));
    }

    /* Fault detection */
    fault = (buffer[1] & 0x80) ? 1 : 0; /* Fault bit in MSB */

    /* Clear fault status if requested */
    if (reset) {
        buffer[0] = 0x80; /* Write to configuration register to reset faults */
        hal_spi_write(spi_fd, &buffer, 1);
        reset = 0;
    }
}

function _cleanup
{
    /* Close SPI device */
    if (spi_fd >= 0) {
        hal_spi_close(spi_fd);
    }
}

; end of file
